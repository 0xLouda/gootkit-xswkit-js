







function inRange(a, min, max) {
    return min <= a && a <= max;
}


function div(n, d) {
    return Math.floor(n / d);
}


//
// Implementation of Encoding specification
// http://dvcs.w3.org/hg/encoding/raw-file/tip/Overview.html










 var EOF_byte = -1;
 var EOF_code_point = -1;


function ByteInputStream(bytes) {
    
    var pos = 0;

    
    this.get = function () {
        return (pos >= bytes.length) ? EOF_byte : Number(bytes[pos]);
    };

    
    this.offset = function (n) {
        pos += n;
        if (pos < 0) {
            throw new Error('Seeking past start of the buffer');
        }
        if (pos > bytes.length) {
            throw new Error('Seeking past EOF');
        }
    };

    
    this.match = function (test) {
        if (test.length > pos + bytes.length) {
            return false;
        }
        var i;
        for (i = 0; i < test.length; i += 1) {
            if (Number(bytes[pos + i]) !== test[i]) {
                return false;
            }
        }
        return true;
    };
}


function ByteOutputStream(bytes) {
    
    var pos = 0;

    
    this.emit = function (var_args) {
        
        var last = EOF_byte;
        var i;
        for (i = 0; i < arguments.length; ++i) {
            last = Number(arguments[i]);
            bytes[pos++] = last;
        }
        return last;
    };
}


function CodePointInputStream(string) {
    
    function stringToCodePoints(string) {
        
        var cps = [];
        
        var i = 0, n = string.length;
        while (i < string.length) {
            var c = string.charCodeAt(i);
            if (!inRange(c, 0xD800, 0xDFFF)) {
                cps.push(c);
            } else if (inRange(c, 0xDC00, 0xDFFF)) {
                cps.push(0xFFFD);
            } else { 
                if (i === n - 1) {
                    cps.push(0xFFFD);
                } else {
                    var d = string.charCodeAt(i + 1);
                    if (inRange(d, 0xDC00, 0xDFFF)) {
                        var a = c & 0x3FF;
                        var b = d & 0x3FF;
                        i += 1;
                        cps.push(0x10000 + (a << 10) + b);
                    } else {
                        cps.push(0xFFFD);
                    }
                }
            }
            i += 1;
        }
        return cps;
    }

    
    var pos = 0;
    
    var cps = stringToCodePoints(string);

    
    this.offset = function (n) {
        pos += n;
        if (pos < 0) {
            throw new Error('Seeking past start of the buffer');
        }
        if (pos > cps.length) {
            throw new Error('Seeking past EOF');
        }
    };


    
    this.get = function () {
        if (pos >= cps.length) {
            return EOF_code_point;
        }
        return cps[pos];
    };
}


function CodePointOutputStream() {
    
    var string = '';

    
    this.string = function () {
        return string;
    };

    
    this.emit = function (c) {
        if (c <= 0xFFFF) {
            string += String.fromCharCode(c);
        } else {
            c -= 0x10000;
            string += String.fromCharCode(0xD800 + ((c >> 10) & 0x3ff));
            string += String.fromCharCode(0xDC00 + (c & 0x3ff));
        }
    };
}


function EncodingError(message) {
    this.name = 'EncodingError';
    this.message = message;
    this.code = 0;
}
EncodingError.prototype = Error.prototype;


function decoderError(fatal, opt_code_point) {
    if (fatal) {
        throw new EncodingError('Decoder error');
    }
    return opt_code_point || 0xFFFD;
}


function encoderError(code_point) {
    throw new EncodingError('The code point ' + code_point +
                            ' could not be encoded.');
}


function getEncoding(label) {
    label = String(label).trim().toLowerCase();
    if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {
        return label_to_encoding[label];
    }
    return null;
}


var encodings = [
  {
      "encodings": [
        {
            "labels": [
              "unicode-1-1-utf-8",
              "utf-8",
              "utf8"
            ],
            "name": "utf-8"
        }
      ],
      "heading": "The Encoding"
  },
  {
      "encodings": [
        {
            "labels": [
              "864",
              "cp864",
              "csibm864",
              "ibm864"
            ],
            "name": "ibm864"
        },
        {
            "labels": [
              "866",
              "cp866",
              "csibm866",
              "ibm866"
            ],
            "name": "ibm866"
        },
        {
            "labels": [
              "csisolatin2",
              "iso-8859-2",
              "iso-ir-101",
              "iso8859-2",
              "iso88592",
              "iso_8859-2",
              "iso_8859-2:1987",
              "l2",
              "latin2"
            ],
            "name": "iso-8859-2"
        },
        {
            "labels": [
              "csisolatin3",
              "iso-8859-3",
              "iso-ir-109",
              "iso8859-3",
              "iso88593",
              "iso_8859-3",
              "iso_8859-3:1988",
              "l3",
              "latin3"
            ],
            "name": "iso-8859-3"
        },
        {
            "labels": [
              "csisolatin4",
              "iso-8859-4",
              "iso-ir-110",
              "iso8859-4",
              "iso88594",
              "iso_8859-4",
              "iso_8859-4:1988",
              "l4",
              "latin4"
            ],
            "name": "iso-8859-4"
        },
        {
            "labels": [
              "csisolatincyrillic",
              "cyrillic",
              "iso-8859-5",
              "iso-ir-144",
              "iso8859-5",
              "iso88595",
              "iso_8859-5",
              "iso_8859-5:1988"
            ],
            "name": "iso-8859-5"
        },
        {
            "labels": [
              "arabic",
              "asmo-708",
              "csiso88596e",
              "csiso88596i",
              "csisolatinarabic",
              "ecma-114",
              "iso-8859-6",
              "iso-8859-6-e",
              "iso-8859-6-i",
              "iso-ir-127",
              "iso8859-6",
              "iso88596",
              "iso_8859-6",
              "iso_8859-6:1987"
            ],
            "name": "iso-8859-6"
        },
        {
            "labels": [
              "csisolatingreek",
              "ecma-118",
              "elot_928",
              "greek",
              "greek8",
              "iso-8859-7",
              "iso-ir-126",
              "iso8859-7",
              "iso88597",
              "iso_8859-7",
              "iso_8859-7:1987",
              "sun_eu_greek"
            ],
            "name": "iso-8859-7"
        },
        {
            "labels": [
              "csiso88598e",
              "csisolatinhebrew",
              "hebrew",
              "iso-8859-8",
              "iso-8859-8-e",
              "iso-ir-138",
              "iso8859-8",
              "iso88598",
              "iso_8859-8",
              "iso_8859-8:1988",
              "visual"
            ],
            "name": "iso-8859-8"
        },
        {
            "labels": [
              "csiso88598i",
              "iso-8859-8-i",
              "logical"
            ],
            "name": "iso-8859-8-i"
        },
        {
            "labels": [
              "csisolatin6",
              "iso-8859-10",
              "iso-ir-157",
              "iso8859-10",
              "iso885910",
              "l6",
              "latin6"
            ],
            "name": "iso-8859-10"
        },
        {
            "labels": [
              "iso-8859-13",
              "iso8859-13",
              "iso885913"
            ],
            "name": "iso-8859-13"
        },
        {
            "labels": [
              "iso-8859-14",
              "iso8859-14",
              "iso885914"
            ],
            "name": "iso-8859-14"
        },
        {
            "labels": [
              "csisolatin9",
              "iso-8859-15",
              "iso8859-15",
              "iso885915",
              "iso_8859-15",
              "l9"
            ],
            "name": "iso-8859-15"
        },
        {
            "labels": [
              "iso-8859-16"
            ],
            "name": "iso-8859-16"
        },
        {
            "labels": [
              "cskoi8r",
              "koi",
              "koi8",
              "koi8-r",
              "koi8_r"
            ],
            "name": "koi8-r"
        },
        {
            "labels": [
              "koi8-u"
            ],
            "name": "koi8-u"
        },
        {
            "labels": [
              "csmacintosh",
              "mac",
              "macintosh",
              "x-mac-roman"
            ],
            "name": "macintosh"
        },
        {
            "labels": [
              "dos-874",
              "iso-8859-11",
              "iso8859-11",
              "iso885911",
              "tis-620",
              "windows-874"
            ],
            "name": "windows-874"
        },
        {
            "labels": [
              "cp1250",
              "windows-1250",
              "x-cp1250"
            ],
            "name": "windows-1250"
        },
        {
            "labels": [
              "cp1251",
              "windows-1251",
              "x-cp1251"
            ],
            "name": "windows-1251"
        },
        {
            "labels": [
              "ansi_x3.4-1968",
              "ascii",
              "cp1252",
              "cp819",
              "csisolatin1",
              "ibm819",
              "iso-8859-1",
              "iso-ir-100",
              "iso8859-1",
              "iso88591",
              "iso_8859-1",
              "iso_8859-1:1987",
              "l1",
              "latin1",
              "us-ascii",
              "windows-1252",
              "x-cp1252"
            ],
            "name": "windows-1252"
        },
        {
            "labels": [
              "cp1253",
              "windows-1253",
              "x-cp1253"
            ],
            "name": "windows-1253"
        },
        {
            "labels": [
              "cp1254",
              "csisolatin5",
              "iso-8859-9",
              "iso-ir-148",
              "iso8859-9",
              "iso88599",
              "iso_8859-9",
              "iso_8859-9:1989",
              "l5",
              "latin5",
              "windows-1254",
              "x-cp1254"
            ],
            "name": "windows-1254"
        },
        {
            "labels": [
              "cp1255",
              "windows-1255",
              "x-cp1255"
            ],
            "name": "windows-1255"
        },
        {
            "labels": [
              "cp1256",
              "windows-1256",
              "x-cp1256"
            ],
            "name": "windows-1256"
        },
        {
            "labels": [
              "cp1257",
              "windows-1257",
              "x-cp1257"
            ],
            "name": "windows-1257"
        },
        {
            "labels": [
              "cp1258",
              "windows-1258",
              "x-cp1258"
            ],
            "name": "windows-1258"
        },
        {
            "labels": [
              "x-mac-cyrillic",
              "x-mac-ukrainian"
            ],
            "name": "x-mac-cyrillic"
        }
      ],
      "heading": "Legacy single-byte encodings"
  },
  {
      "encodings": [
        {
            "labels": [
              "csiso2022kr",
              "iso-2022-kr",
              "iso-2022-cn",
              "iso-2022-cn-ext"
            ],
            "name": "replacement"
        },
        {
            "labels": [
              "utf-16be"
            ],
            "name": "utf-16be"
        },
        {
            "labels": [
              "utf-16",
              "utf-16le"
            ],
            "name": "utf-16le"
        },
        {
            "labels": [
              "x-user-defined"
            ],
            "name": "x-user-defined"
        }
      ],
      "heading": "Legacy miscellaneous encodings"
  }
];

var name_to_encoding = {};
var label_to_encoding = {};
encodings.forEach(function (category) {
    category.encodings.forEach(function (encoding) {
        name_to_encoding[encoding.name] = encoding;
        encoding.labels.forEach(function (label) {
            label_to_encoding[label] = encoding;
        });
    });
});






function indexCodePointFor(pointer, index) {
    return (index || [])[pointer] || null;
}


function indexPointerFor(code_point, index) {
    var pointer = index.indexOf(code_point);
    return pointer === -1 ? null : pointer;
}


var indexes = {
    "ibm864": [176, 183, 8729, 8730, 9618, 9472, 9474, 9532, 9508, 9516, 9500, 9524, 9488, 9484, 9492, 9496, 946, 8734, 966, 177, 189, 188, 8776, 171, 187, 65271, 65272, 155, 156, 65275, 65276, 159, 160, 173, 65154, 163, 164, 65156, null, null, 65166, 65167, 65173, 65177, 1548, 65181, 65185, 65189, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 65233, 1563, 65201, 65205, 65209, 1567, 162, 65152, 65153, 65155, 65157, 65226, 65163, 65165, 65169, 65171, 65175, 65179, 65183, 65187, 65191, 65193, 65195, 65197, 65199, 65203, 65207, 65211, 65215, 65217, 65221, 65227, 65231, 166, 172, 247, 215, 65225, 1600, 65235, 65239, 65243, 65247, 65251, 65255, 65259, 65261, 65263, 65267, 65213, 65228, 65230, 65229, 65249, 65149, 1617, 65253, 65257, 65260, 65264, 65266, 65232, 65237, 65269, 65270, 65245, 65241, 65265, 9632, null],
    "ibm866": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 9617, 9618, 9619, 9474, 9508, 9569, 9570, 9558, 9557, 9571, 9553, 9559, 9565, 9564, 9563, 9488, 9492, 9524, 9516, 9500, 9472, 9532, 9566, 9567, 9562, 9556, 9577, 9574, 9568, 9552, 9580, 9575, 9576, 9572, 9573, 9561, 9560, 9554, 9555, 9579, 9578, 9496, 9484, 9608, 9604, 9612, 9616, 9600, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1025, 1105, 1028, 1108, 1031, 1111, 1038, 1118, 176, 8729, 183, 8730, 8470, 164, 9632, 160],
    "iso-8859-2": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 260, 728, 321, 164, 317, 346, 167, 168, 352, 350, 356, 377, 173, 381, 379, 176, 261, 731, 322, 180, 318, 347, 711, 184, 353, 351, 357, 378, 733, 382, 380, 340, 193, 194, 258, 196, 313, 262, 199, 268, 201, 280, 203, 282, 205, 206, 270, 272, 323, 327, 211, 212, 336, 214, 215, 344, 366, 218, 368, 220, 221, 354, 223, 341, 225, 226, 259, 228, 314, 263, 231, 269, 233, 281, 235, 283, 237, 238, 271, 273, 324, 328, 243, 244, 337, 246, 247, 345, 367, 250, 369, 252, 253, 355, 729],
    "iso-8859-3": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 294, 728, 163, 164, null, 292, 167, 168, 304, 350, 286, 308, 173, null, 379, 176, 295, 178, 179, 180, 181, 293, 183, 184, 305, 351, 287, 309, 189, null, 380, 192, 193, 194, null, 196, 266, 264, 199, 200, 201, 202, 203, 204, 205, 206, 207, null, 209, 210, 211, 212, 288, 214, 215, 284, 217, 218, 219, 220, 364, 348, 223, 224, 225, 226, null, 228, 267, 265, 231, 232, 233, 234, 235, 236, 237, 238, 239, null, 241, 242, 243, 244, 289, 246, 247, 285, 249, 250, 251, 252, 365, 349, 729],
    "iso-8859-4": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 260, 312, 342, 164, 296, 315, 167, 168, 352, 274, 290, 358, 173, 381, 175, 176, 261, 731, 343, 180, 297, 316, 711, 184, 353, 275, 291, 359, 330, 382, 331, 256, 193, 194, 195, 196, 197, 198, 302, 268, 201, 280, 203, 278, 205, 206, 298, 272, 325, 332, 310, 212, 213, 214, 215, 216, 370, 218, 219, 220, 360, 362, 223, 257, 225, 226, 227, 228, 229, 230, 303, 269, 233, 281, 235, 279, 237, 238, 299, 273, 326, 333, 311, 244, 245, 246, 247, 248, 371, 250, 251, 252, 361, 363, 729],
    "iso-8859-5": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 173, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 8470, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 167, 1118, 1119],
    "iso-8859-6": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, null, null, null, 164, null, null, null, null, null, null, null, 1548, 173, null, null, null, null, null, null, null, null, null, null, null, null, null, 1563, null, null, null, 1567, null, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, null, null, null, null, null, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, null, null, null, null, null, null, null, null, null, null, null, null, null],
    "iso-8859-7": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 8216, 8217, 163, 8364, 8367, 166, 167, 168, 169, 890, 171, 172, 173, null, 8213, 176, 177, 178, 179, 900, 901, 902, 183, 904, 905, 906, 187, 908, 189, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, null, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, null],
    "iso-8859-8": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, null, 162, 163, 164, 165, 166, 167, 168, 169, 215, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 247, 187, 188, 189, 190, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 8215, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, null, null, 8206, 8207, null],
    "iso-8859-10": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 260, 274, 290, 298, 296, 310, 167, 315, 272, 352, 358, 381, 173, 362, 330, 176, 261, 275, 291, 299, 297, 311, 183, 316, 273, 353, 359, 382, 8213, 363, 331, 256, 193, 194, 195, 196, 197, 198, 302, 268, 201, 280, 203, 278, 205, 206, 207, 208, 325, 332, 211, 212, 213, 214, 360, 216, 370, 218, 219, 220, 221, 222, 223, 257, 225, 226, 227, 228, 229, 230, 303, 269, 233, 281, 235, 279, 237, 238, 239, 240, 326, 333, 243, 244, 245, 246, 361, 248, 371, 250, 251, 252, 253, 254, 312],
    "iso-8859-13": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 8221, 162, 163, 164, 8222, 166, 167, 216, 169, 342, 171, 172, 173, 174, 198, 176, 177, 178, 179, 8220, 181, 182, 183, 248, 185, 343, 187, 188, 189, 190, 230, 260, 302, 256, 262, 196, 197, 280, 274, 268, 201, 377, 278, 290, 310, 298, 315, 352, 323, 325, 211, 332, 213, 214, 215, 370, 321, 346, 362, 220, 379, 381, 223, 261, 303, 257, 263, 228, 229, 281, 275, 269, 233, 378, 279, 291, 311, 299, 316, 353, 324, 326, 243, 333, 245, 246, 247, 371, 322, 347, 363, 252, 380, 382, 8217],
    "iso-8859-14": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 7682, 7683, 163, 266, 267, 7690, 167, 7808, 169, 7810, 7691, 7922, 173, 174, 376, 7710, 7711, 288, 289, 7744, 7745, 182, 7766, 7809, 7767, 7811, 7776, 7923, 7812, 7813, 7777, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 372, 209, 210, 211, 212, 213, 214, 7786, 216, 217, 218, 219, 220, 221, 374, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 373, 241, 242, 243, 244, 245, 246, 7787, 248, 249, 250, 251, 252, 253, 375, 255],
    "iso-8859-15": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 8364, 165, 352, 167, 353, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 381, 181, 182, 183, 382, 185, 186, 187, 338, 339, 376, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255],
    "iso-8859-16": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 260, 261, 321, 8364, 8222, 352, 167, 353, 169, 536, 171, 377, 173, 378, 379, 176, 177, 268, 322, 381, 8221, 182, 183, 382, 269, 537, 187, 338, 339, 376, 380, 192, 193, 194, 258, 196, 262, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 272, 323, 210, 211, 212, 336, 214, 346, 368, 217, 218, 219, 220, 280, 538, 223, 224, 225, 226, 259, 228, 263, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 273, 324, 242, 243, 244, 337, 246, 347, 369, 249, 250, 251, 252, 281, 539, 255],
    "koi8-r": [9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 8992, 9632, 8729, 8730, 8776, 8804, 8805, 160, 8993, 176, 178, 183, 247, 9552, 9553, 9554, 1105, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 1025, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 169, 1102, 1072, 1073, 1094, 1076, 1077, 1092, 1075, 1093, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1103, 1088, 1089, 1090, 1091, 1078, 1074, 1100, 1099, 1079, 1096, 1101, 1097, 1095, 1098, 1070, 1040, 1041, 1062, 1044, 1045, 1060, 1043, 1061, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1071, 1056, 1057, 1058, 1059, 1046, 1042, 1068, 1067, 1047, 1064, 1069, 1065, 1063, 1066],
    "koi8-u": [9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 8992, 9632, 8729, 8730, 8776, 8804, 8805, 160, 8993, 176, 178, 183, 247, 9552, 9553, 9554, 1105, 1108, 9556, 1110, 1111, 9559, 9560, 9561, 9562, 9563, 1169, 9565, 9566, 9567, 9568, 9569, 1025, 1028, 9571, 1030, 1031, 9574, 9575, 9576, 9577, 9578, 1168, 9580, 169, 1102, 1072, 1073, 1094, 1076, 1077, 1092, 1075, 1093, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1103, 1088, 1089, 1090, 1091, 1078, 1074, 1100, 1099, 1079, 1096, 1101, 1097, 1095, 1098, 1070, 1040, 1041, 1062, 1044, 1045, 1060, 1043, 1061, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1071, 1056, 1057, 1058, 1059, 1046, 1042, 1068, 1067, 1047, 1064, 1069, 1065, 1063, 1066],
    "macintosh": [196, 197, 199, 201, 209, 214, 220, 225, 224, 226, 228, 227, 229, 231, 233, 232, 234, 235, 237, 236, 238, 239, 241, 243, 242, 244, 246, 245, 250, 249, 251, 252, 8224, 176, 162, 163, 167, 8226, 182, 223, 174, 169, 8482, 180, 168, 8800, 198, 216, 8734, 177, 8804, 8805, 165, 181, 8706, 8721, 8719, 960, 8747, 170, 186, 937, 230, 248, 191, 161, 172, 8730, 402, 8776, 8710, 171, 187, 8230, 160, 192, 195, 213, 338, 339, 8211, 8212, 8220, 8221, 8216, 8217, 247, 9674, 255, 376, 8260, 8364, 8249, 8250, 64257, 64258, 8225, 183, 8218, 8222, 8240, 194, 202, 193, 203, 200, 205, 206, 207, 204, 211, 212, 63743, 210, 218, 219, 217, 305, 710, 732, 175, 728, 729, 730, 184, 733, 731, 711],
    "windows-874": [8364, 129, 130, 131, 132, 8230, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 153, 154, 155, 156, 157, 158, 159, 160, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, null, null, null, null, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, null, null, null, null],
    "windows-1250": [8364, 129, 8218, 131, 8222, 8230, 8224, 8225, 136, 8240, 352, 8249, 346, 356, 381, 377, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482, 353, 8250, 347, 357, 382, 378, 160, 711, 728, 321, 164, 260, 166, 167, 168, 169, 350, 171, 172, 173, 174, 379, 176, 177, 731, 322, 180, 181, 182, 183, 184, 261, 351, 187, 317, 733, 318, 380, 340, 193, 194, 258, 196, 313, 262, 199, 268, 201, 280, 203, 282, 205, 206, 270, 272, 323, 327, 211, 212, 336, 214, 215, 344, 366, 218, 368, 220, 221, 354, 223, 341, 225, 226, 259, 228, 314, 263, 231, 269, 233, 281, 235, 283, 237, 238, 271, 273, 324, 328, 243, 244, 337, 246, 247, 345, 367, 250, 369, 252, 253, 355, 729],
    "windows-1251": [1026, 1027, 8218, 1107, 8222, 8230, 8224, 8225, 8364, 8240, 1033, 8249, 1034, 1036, 1035, 1039, 1106, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482, 1113, 8250, 1114, 1116, 1115, 1119, 160, 1038, 1118, 1032, 164, 1168, 166, 167, 1025, 169, 1028, 171, 172, 173, 174, 1031, 176, 177, 1030, 1110, 1169, 181, 182, 183, 1105, 8470, 1108, 187, 1112, 1029, 1109, 1111, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103],
    "windows-1252": [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255],
    "windows-1253": [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 136, 8240, 138, 8249, 140, 141, 142, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482, 154, 8250, 156, 157, 158, 159, 160, 901, 902, 163, 164, 165, 166, 167, 168, 169, null, 171, 172, 173, 174, 8213, 176, 177, 178, 179, 900, 181, 182, 183, 904, 905, 906, 187, 908, 189, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, null, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, null],
    "windows-1254": [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 142, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 158, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 286, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 304, 350, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 287, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 305, 351, 255],
    "windows-1255": [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 138, 8249, 140, 141, 142, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 154, 8250, 156, 157, 158, 159, 160, 161, 162, 163, 8362, 165, 166, 167, 168, 169, 215, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 247, 187, 188, 189, 190, 191, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, null, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1520, 1521, 1522, 1523, 1524, null, null, null, null, null, null, null, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, null, null, 8206, 8207, null],
    "windows-1256": [8364, 1662, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 1657, 8249, 338, 1670, 1688, 1672, 1711, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 1705, 8482, 1681, 8250, 339, 8204, 8205, 1722, 160, 1548, 162, 163, 164, 165, 166, 167, 168, 169, 1726, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 1563, 187, 188, 189, 190, 1567, 1729, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 215, 1591, 1592, 1593, 1594, 1600, 1601, 1602, 1603, 224, 1604, 226, 1605, 1606, 1607, 1608, 231, 232, 233, 234, 235, 1609, 1610, 238, 239, 1611, 1612, 1613, 1614, 244, 1615, 1616, 247, 1617, 249, 1618, 251, 252, 8206, 8207, 1746],
    "windows-1257": [8364, 129, 8218, 131, 8222, 8230, 8224, 8225, 136, 8240, 138, 8249, 140, 168, 711, 184, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482, 154, 8250, 156, 175, 731, 159, 160, null, 162, 163, 164, null, 166, 167, 216, 169, 342, 171, 172, 173, 174, 198, 176, 177, 178, 179, 180, 181, 182, 183, 248, 185, 343, 187, 188, 189, 190, 230, 260, 302, 256, 262, 196, 197, 280, 274, 268, 201, 377, 278, 290, 310, 298, 315, 352, 323, 325, 211, 332, 213, 214, 215, 370, 321, 346, 362, 220, 379, 381, 223, 261, 303, 257, 263, 228, 229, 281, 275, 269, 233, 378, 279, 291, 311, 299, 316, 353, 324, 326, 243, 333, 245, 246, 247, 371, 322, 347, 363, 252, 380, 382, 729],
    "windows-1258": [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 138, 8249, 338, 141, 142, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 154, 8250, 339, 157, 158, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 258, 196, 197, 198, 199, 200, 201, 202, 203, 768, 205, 206, 207, 272, 209, 777, 211, 212, 416, 214, 215, 216, 217, 218, 219, 220, 431, 771, 223, 224, 225, 226, 259, 228, 229, 230, 231, 232, 233, 234, 235, 769, 237, 238, 239, 273, 241, 803, 243, 244, 417, 246, 247, 248, 249, 250, 251, 252, 432, 8363, 255],
    "x-mac-cyrillic": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 8224, 176, 1168, 163, 167, 8226, 182, 1030, 174, 169, 8482, 1026, 1106, 8800, 1027, 1107, 8734, 177, 8804, 8805, 1110, 181, 1169, 1032, 1028, 1108, 1031, 1111, 1033, 1113, 1034, 1114, 1112, 1029, 172, 8730, 402, 8776, 8710, 171, 187, 8230, 160, 1035, 1115, 1036, 1116, 1109, 8211, 8212, 8220, 8221, 8216, 8217, 247, 8222, 1038, 1118, 1039, 1119, 8470, 1025, 1105, 1103, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 8364]
}








function UTF8Decoder(options) {
    var fatal = options.fatal;
    var  utf8_code_point = 0,
         utf8_bytes_needed = 0,
         utf8_bytes_seen = 0,
         utf8_lower_boundary = 0;

    
    this.decode = function (byte_pointer) {
        var bite = byte_pointer.get();
        if (bite === EOF_byte) {
            if (utf8_bytes_needed !== 0) {
                return decoderError(fatal);
            }
            return EOF_code_point;
        }
        byte_pointer.offset(1);

        if (utf8_bytes_needed === 0) {
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            if (inRange(bite, 0xC2, 0xDF)) {
                utf8_bytes_needed = 1;
                utf8_lower_boundary = 0x80;
                utf8_code_point = bite - 0xC0;
            } else if (inRange(bite, 0xE0, 0xEF)) {
                utf8_bytes_needed = 2;
                utf8_lower_boundary = 0x800;
                utf8_code_point = bite - 0xE0;
            } else if (inRange(bite, 0xF0, 0xF4)) {
                utf8_bytes_needed = 3;
                utf8_lower_boundary = 0x10000;
                utf8_code_point = bite - 0xF0;
            } else {
                return decoderError(fatal);
            }
            utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);
            return null;
        }
        if (!inRange(bite, 0x80, 0xBF)) {
            utf8_code_point = 0;
            utf8_bytes_needed = 0;
            utf8_bytes_seen = 0;
            utf8_lower_boundary = 0;
            byte_pointer.offset(-1);
            return decoderError(fatal);
        }
        utf8_bytes_seen += 1;
        utf8_code_point = utf8_code_point + (bite - 0x80) *
            Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
        if (utf8_bytes_seen !== utf8_bytes_needed) {
            return null;
        }
        var code_point = utf8_code_point;
        var lower_boundary = utf8_lower_boundary;
        utf8_code_point = 0;
        utf8_bytes_needed = 0;
        utf8_bytes_seen = 0;
        utf8_lower_boundary = 0;
        if (inRange(code_point, lower_boundary, 0x10FFFF) &&
            !inRange(code_point, 0xD800, 0xDFFF)) {
            return code_point;
        }
        return decoderError(fatal);
    };
}


function UTF8Encoder(options) {
    var fatal = options.fatal;
    
    this.encode = function (output_byte_stream, code_point_pointer) {
        var code_point = code_point_pointer.get();
        if (code_point === EOF_code_point) {
            return EOF_byte;
        }
        code_point_pointer.offset(1);
        if (inRange(code_point, 0xD800, 0xDFFF)) {
            return encoderError(code_point);
        }
        if (inRange(code_point, 0x0000, 0x007f)) {
            return output_byte_stream.emit(code_point);
        }
        var count, offset;
        if (inRange(code_point, 0x0080, 0x07FF)) {
            count = 1;
            offset = 0xC0;
        } else if (inRange(code_point, 0x0800, 0xFFFF)) {
            count = 2;
            offset = 0xE0;
        } else if (inRange(code_point, 0x10000, 0x10FFFF)) {
            count = 3;
            offset = 0xF0;
        }
        var result = output_byte_stream.emit(
            div(code_point, Math.pow(64, count)) + offset);
        while (count > 0) {
            var temp = div(code_point, Math.pow(64, count - 1));
            result = output_byte_stream.emit(0x80 + (temp % 64));
            count -= 1;
        }
        return result;
    };
}

name_to_encoding['utf-8'].getEncoder = function (options) {
    return new UTF8Encoder(options);
};
name_to_encoding['utf-8'].getDecoder = function (options) {
    return new UTF8Decoder(options);
};






function SingleByteDecoder(index, options) {
    var fatal = options.fatal;
    
    this.decode = function (byte_pointer) {
        var bite = byte_pointer.get();
        if (bite === EOF_byte) {
            return EOF_code_point;
        }
        byte_pointer.offset(1);
        if (inRange(bite, 0x00, 0x7F)) {
            return bite;
        }
        var code_point = index[bite - 0x80];
        if (code_point === null) {
            return decoderError(fatal);
        }
        return code_point;
    };
}


function SingleByteEncoder(index, options) {
    var fatal = options.fatal;
    
    this.encode = function (output_byte_stream, code_point_pointer) {
        var code_point = code_point_pointer.get();
        if (code_point === EOF_code_point) {
            return EOF_byte;
        }
        code_point_pointer.offset(1);
        if (inRange(code_point, 0x0000, 0x007F)) {
            return output_byte_stream.emit(code_point);
        }
        var pointer = indexPointerFor(code_point, index);
        if (pointer === null) {
            encoderError(code_point);
        }
        return output_byte_stream.emit(pointer + 0x80);
    };
}

(function () {
    encodings.forEach(function (category) {
        if (category.heading !== 'Legacy single-byte encodings')
            return;
        category.encodings.forEach(function (encoding) {
            var index = indexes[encoding.name];
            encoding.getDecoder = function (options) {
                return new SingleByteDecoder(index, options);
            };
            encoding.getEncoder = function (options) {
                return new SingleByteEncoder(index, options);
            };
        });
    });
}());













function UTF16Decoder(utf16_be, options) {
    var fatal = options.fatal;
    var  utf16_lead_byte = null,
         utf16_lead_surrogate = null;
    
    this.decode = function (byte_pointer) {
        var bite = byte_pointer.get();
        if (bite === EOF_byte && utf16_lead_byte === null &&
            utf16_lead_surrogate === null) {
            return EOF_code_point;
        }
        if (bite === EOF_byte && (utf16_lead_byte !== null ||
                                  utf16_lead_surrogate !== null)) {
            return decoderError(fatal);
        }
        byte_pointer.offset(1);
        if (utf16_lead_byte === null) {
            utf16_lead_byte = bite;
            return null;
        }
        var code_point;
        if (utf16_be) {
            code_point = (utf16_lead_byte << 8) + bite;
        } else {
            code_point = (bite << 8) + utf16_lead_byte;
        }
        utf16_lead_byte = null;
        if (utf16_lead_surrogate !== null) {
            var lead_surrogate = utf16_lead_surrogate;
            utf16_lead_surrogate = null;
            if (inRange(code_point, 0xDC00, 0xDFFF)) {
                return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +
                    (code_point - 0xDC00);
            }
            byte_pointer.offset(-2);
            return decoderError(fatal);
        }
        if (inRange(code_point, 0xD800, 0xDBFF)) {
            utf16_lead_surrogate = code_point;
            return null;
        }
        if (inRange(code_point, 0xDC00, 0xDFFF)) {
            return decoderError(fatal);
        }
        return code_point;
    };
}


function UTF16Encoder(utf16_be, options) {
    var fatal = options.fatal;
    
    this.encode = function (output_byte_stream, code_point_pointer) {
        function convert_to_bytes(code_unit) {
            var byte1 = code_unit >> 8;
            var byte2 = code_unit & 0x00FF;
            if (utf16_be) {
                return output_byte_stream.emit(byte1, byte2);
            }
            return output_byte_stream.emit(byte2, byte1);
        }
        var code_point = code_point_pointer.get();
        if (code_point === EOF_code_point) {
            return EOF_byte;
        }
        code_point_pointer.offset(1);
        if (inRange(code_point, 0xD800, 0xDFFF)) {
            encoderError(code_point);
        }
        if (code_point <= 0xFFFF) {
            return convert_to_bytes(code_point);
        }
        var lead = div((code_point - 0x10000), 0x400) + 0xD800;
        var trail = ((code_point - 0x10000) % 0x400) + 0xDC00;
        convert_to_bytes(lead);
        return convert_to_bytes(trail);
    };
}

name_to_encoding['utf-16le'].getEncoder = function (options) {
    return new UTF16Encoder(false, options);
};
name_to_encoding['utf-16le'].getDecoder = function (options) {
    return new UTF16Decoder(false, options);
};


name_to_encoding['utf-16be'].getEncoder = function (options) {
    return new UTF16Encoder(true, options);
};
name_to_encoding['utf-16be'].getDecoder = function (options) {
    return new UTF16Decoder(true, options);
};




function detectEncoding(label, input_stream) {
    if (input_stream.match([0xFF, 0xFE])) {
        input_stream.offset(2);
        return 'utf-16le';
    }
    if (input_stream.match([0xFE, 0xFF])) {
        input_stream.offset(2);
        return 'utf-16be';
    }
    if (input_stream.match([0xEF, 0xBB, 0xBF])) {
        input_stream.offset(3);
        return 'utf-8';
    }
    return label;
}





 var DEFAULT_ENCODING = 'utf-8';


function TextEncoder(opt_encoding, options) {
    if (!(this instanceof TextEncoder)) {
        return new TextEncoder(opt_encoding, options);
    }
    opt_encoding = opt_encoding ? String(opt_encoding) : DEFAULT_ENCODING;
    options = Object(options);
    
    this._encoding = getEncoding(opt_encoding);
    if (this._encoding === null || (this._encoding.name !== 'utf-8' &&
                                    this._encoding.name !== 'utf-16le' &&
                                    this._encoding.name !== 'utf-16be'))
        throw new TypeError('Unknown encoding: ' + opt_encoding);
    
    this._streaming = false;
    
    this._encoder = null;
    
    this._options = { fatal: Boolean(options.fatal) };

    if (Object.defineProperty) {
        Object.defineProperty(
            this, 'encoding',
            { get: function () { return this._encoding.name; } });
    } else {
        this.encoding = this._encoding.name;
    }

    return this;
}

TextEncoder.prototype = {
    
    encode: function encode(opt_string, options) {
        opt_string = opt_string ? String(opt_string) : '';
        options = Object(options);
        
        if (!this._streaming) {
            this._encoder = this._encoding.getEncoder(this._options);
        }
        this._streaming = Boolean(options.stream);

        var bytes = [];
        var output_stream = new ByteOutputStream(bytes);
        var input_stream = new CodePointInputStream(opt_string);
        while (input_stream.get() !== EOF_code_point) {
            this._encoder.encode(output_stream, input_stream);
        }
        if (!this._streaming) {
            var last_byte;
            do {
                last_byte = this._encoder.encode(output_stream, input_stream);
            } while (last_byte !== EOF_byte);
            this._encoder = null;
        }
        return new Buffer(bytes);
    }
};



function TextDecoder(opt_encoding, options) {
    if (!(this instanceof TextDecoder)) {
        return new TextDecoder(opt_encoding, options);
    }
    opt_encoding = opt_encoding ? String(opt_encoding) : DEFAULT_ENCODING;
    options = Object(options);
    
    this._encoding = getEncoding(opt_encoding);
    if (this._encoding === null)
        throw new TypeError('Unknown encoding: ' + opt_encoding);

    
    this._streaming = false;
    
    this._decoder = null;
    
    this._options = { fatal: Boolean(options.fatal) };

    if (Object.defineProperty) {
        Object.defineProperty(
            this, 'encoding',
            { get: function () { return this._encoding.name; } });
    } else {
        this.encoding = this._encoding.name;
    }

    return this;
}




TextDecoder.prototype = {
    
    decode: function decode(buf, options) {
        options = Object(options);

        if (!this._streaming) {
            this._decoder = this._encoding.getDecoder(this._options);
            this._BOMseen = false;
        }
        this._streaming = Boolean(options.stream);

        var input_stream = new ByteInputStream(buf);

        var output_stream = new CodePointOutputStream(), code_point;
        while (input_stream.get() !== EOF_byte) {
            code_point = this._decoder.decode(input_stream);
            if (code_point !== null && code_point !== EOF_code_point) {
                output_stream.emit(code_point);
            }
        }
        if (!this._streaming) {
            do {
                code_point = this._decoder.decode(input_stream);
                if (code_point !== null && code_point !== EOF_code_point) {
                    output_stream.emit(code_point);
                }
            } while (code_point !== EOF_code_point &&
                     input_stream.get() != EOF_byte);
            this._decoder = null;
        }

        var result = output_stream.string();
        if (!this._BOMseen && result.length) {
            this._BOMseen = true;
            if (UTFs.indexOf(this.encoding) !== -1 &&
               result.charCodeAt(0) === 0xFEFF) {
                result = result.substring(1);
            }
        }

        return result;
    }
};

var UTFs = ['utf-8', 'utf-16le', 'utf-16be'];
exports.TextEncoder = TextEncoder;
exports.TextDecoder = TextDecoder;
exports.encodingExists = getEncoding;

var iconvLite = require('inconvlite');
var Iconv;

exports.convert = convert;

function checkEncoding(name) {
    return (name || '').toString().trim().
    replace(/^latin[\-_]?(\d+)$/i, 'ISO-8859-$1').
    replace(/^win(?:dows)?[\-_]?(\d+)$/i, 'WINDOWS-$1').
    replace(/^utf[\-_]?(\d+)$/i, 'UTF-$1').
    replace(/^ks_c_5601\-1987$/i, 'CP949').
    replace(/^us[\-_]?ascii$/i, 'ASCII').
    toUpperCase();
}

function convert(str, to, from, useLite) {
    from = checkEncoding(from || 'UTF-8');
    to = checkEncoding(to || 'UTF-8');
    str = str || '';

    var result;

    if (from != 'UTF-8' && typeof str == 'string') {
        str = new Buffer(str, 'binary');
    }

    if (from === to) {
        if (typeof str === 'string') {
            result = new Buffer(str);
        } else {
            result = str;
        }
    } else {
        try {
            result = convertIconvLite(str, to, from);
        } catch (E) {
            console.error(E);
            result = str;
        }
    }

    if (typeof result == 'string') {
        result = new Buffer(result, 'utf-8');
    }

    return result;
}


function convertIconvLite(str, to, from) {
    if (to == 'UTF-8') {
        return iconvLite.decode(str, from);
    } else if (from == 'UTF-8') {
        return iconvLite.encode(str, to);
    } else {
        return iconvLite.encode(iconvLite.decode(str, from), to);
    }
}